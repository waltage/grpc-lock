// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: grpc_lock_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcLockService_NewMutex_FullMethodName     = "/grpc_lock.GrpcLockService/NewMutex"
	GrpcLockService_CertifyMutex_FullMethodName = "/grpc_lock.GrpcLockService/CertifyMutex"
	GrpcLockService_ReleaseMutex_FullMethodName = "/grpc_lock.GrpcLockService/ReleaseMutex"
	GrpcLockService_ExtendMutex_FullMethodName  = "/grpc_lock.GrpcLockService/ExtendMutex"
)

// GrpcLockServiceClient is the client API for GrpcLockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcLockServiceClient interface {
	NewMutex(ctx context.Context, in *NewMutexRequest, opts ...grpc.CallOption) (*GCSMutex, error)
	CertifyMutex(ctx context.Context, in *GCSMutex, opts ...grpc.CallOption) (*GCSMutex, error)
	ReleaseMutex(ctx context.Context, in *GCSMutex, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExtendMutex(ctx context.Context, in *ExtendMutexRequest, opts ...grpc.CallOption) (*GCSMutex, error)
}

type grpcLockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcLockServiceClient(cc grpc.ClientConnInterface) GrpcLockServiceClient {
	return &grpcLockServiceClient{cc}
}

func (c *grpcLockServiceClient) NewMutex(ctx context.Context, in *NewMutexRequest, opts ...grpc.CallOption) (*GCSMutex, error) {
	out := new(GCSMutex)
	err := c.cc.Invoke(ctx, GrpcLockService_NewMutex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcLockServiceClient) CertifyMutex(ctx context.Context, in *GCSMutex, opts ...grpc.CallOption) (*GCSMutex, error) {
	out := new(GCSMutex)
	err := c.cc.Invoke(ctx, GrpcLockService_CertifyMutex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcLockServiceClient) ReleaseMutex(ctx context.Context, in *GCSMutex, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GrpcLockService_ReleaseMutex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcLockServiceClient) ExtendMutex(ctx context.Context, in *ExtendMutexRequest, opts ...grpc.CallOption) (*GCSMutex, error) {
	out := new(GCSMutex)
	err := c.cc.Invoke(ctx, GrpcLockService_ExtendMutex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcLockServiceServer is the server API for GrpcLockService service.
// All implementations must embed UnimplementedGrpcLockServiceServer
// for forward compatibility
type GrpcLockServiceServer interface {
	NewMutex(context.Context, *NewMutexRequest) (*GCSMutex, error)
	CertifyMutex(context.Context, *GCSMutex) (*GCSMutex, error)
	ReleaseMutex(context.Context, *GCSMutex) (*emptypb.Empty, error)
	ExtendMutex(context.Context, *ExtendMutexRequest) (*GCSMutex, error)
	mustEmbedUnimplementedGrpcLockServiceServer()
}

// UnimplementedGrpcLockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcLockServiceServer struct {
}

func (UnimplementedGrpcLockServiceServer) NewMutex(context.Context, *NewMutexRequest) (*GCSMutex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMutex not implemented")
}
func (UnimplementedGrpcLockServiceServer) CertifyMutex(context.Context, *GCSMutex) (*GCSMutex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertifyMutex not implemented")
}
func (UnimplementedGrpcLockServiceServer) ReleaseMutex(context.Context, *GCSMutex) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseMutex not implemented")
}
func (UnimplementedGrpcLockServiceServer) ExtendMutex(context.Context, *ExtendMutexRequest) (*GCSMutex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendMutex not implemented")
}
func (UnimplementedGrpcLockServiceServer) mustEmbedUnimplementedGrpcLockServiceServer() {}

// UnsafeGrpcLockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcLockServiceServer will
// result in compilation errors.
type UnsafeGrpcLockServiceServer interface {
	mustEmbedUnimplementedGrpcLockServiceServer()
}

func RegisterGrpcLockServiceServer(s grpc.ServiceRegistrar, srv GrpcLockServiceServer) {
	s.RegisterService(&GrpcLockService_ServiceDesc, srv)
}

func _GrpcLockService_NewMutex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMutexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcLockServiceServer).NewMutex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcLockService_NewMutex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcLockServiceServer).NewMutex(ctx, req.(*NewMutexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcLockService_CertifyMutex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCSMutex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcLockServiceServer).CertifyMutex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcLockService_CertifyMutex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcLockServiceServer).CertifyMutex(ctx, req.(*GCSMutex))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcLockService_ReleaseMutex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCSMutex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcLockServiceServer).ReleaseMutex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcLockService_ReleaseMutex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcLockServiceServer).ReleaseMutex(ctx, req.(*GCSMutex))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcLockService_ExtendMutex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendMutexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcLockServiceServer).ExtendMutex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcLockService_ExtendMutex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcLockServiceServer).ExtendMutex(ctx, req.(*ExtendMutexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcLockService_ServiceDesc is the grpc.ServiceDesc for GrpcLockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcLockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_lock.GrpcLockService",
	HandlerType: (*GrpcLockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMutex",
			Handler:    _GrpcLockService_NewMutex_Handler,
		},
		{
			MethodName: "CertifyMutex",
			Handler:    _GrpcLockService_CertifyMutex_Handler,
		},
		{
			MethodName: "ReleaseMutex",
			Handler:    _GrpcLockService_ReleaseMutex_Handler,
		},
		{
			MethodName: "ExtendMutex",
			Handler:    _GrpcLockService_ExtendMutex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_lock_service.proto",
}
